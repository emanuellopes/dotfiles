!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
%	home/emanuelx/.vim/plugin/MatchIt.vim	/^nnoremap <silent> % :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	home/emanuelx/.vim/plugin/MatchIt.vim	/^onoremap <silent> % v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	home/emanuelx/.vim/plugin/MatchIt.vim	/^vnoremap <silent> % :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
<Esc>OA	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OA <Up>$/;"	m
<Esc>OB	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OB <Down>$/;"	m
<Esc>OC	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OC <Right>$/;"	m
<Esc>OD	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OD <Left>$/;"	m
<Esc>OF	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OF <End>$/;"	m
<Esc>OH	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>OH <Home>$/;"	m
<Esc>[5~	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>[5~ <PageUp>$/;"	m
<Esc>[6~	home/emanuelx/.vim/AutoClose.vim	/^        imap <silent> <Esc>[6~ <PageDown>$/;"	m
<Leader>bd	home/emanuelx/.vim/plugin/bclose.vim	/^nnoremap <silent> <Leader>bd :Bclose<CR>$/;"	m
<Plug	home/emanuelx/.vim/AutoClose.vim	/^augroup <Plug>(autoclose)$/;"	a
<c-r><tab>	home/emanuelx/.vim/bundle/snipMate/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<s-tab>	home/emanuelx/.vim/bundle/snipMate/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	home/emanuelx/.vim/bundle/snipMate/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
AllowQuote	home/emanuelx/.vim/AutoClose.vim	/^function! s:AllowQuote(char, isBS)$/;"	f
AutoClose#DefaultPairs	home/emanuelx/.vim/AutoClose.vim	/^function! AutoClose#DefaultPairs()$/;"	f
AutoClose#DefaultPairsModified	home/emanuelx/.vim/AutoClose.vim	/^function! AutoClose#DefaultPairsModified(pairsToAdd,openersToRemove)$/;"	f
AutoClose#ParsePairs	home/emanuelx/.vim/AutoClose.vim	/^function! AutoClose#ParsePairs(string)$/;"	f
AutoCloseOff	home/emanuelx/.vim/AutoClose.vim	/^command! AutoCloseOff :let b:AutoCloseOn = 0$/;"	c
AutoCloseOn	home/emanuelx/.vim/AutoClose.vim	/^command! AutoCloseOn :let b:AutoCloseOn = 1$/;"	c
AutoCloseToggle	home/emanuelx/.vim/AutoClose.vim	/^command! AutoCloseToggle :call s:ToggleAutoClose()$/;"	c
Backspace	home/emanuelx/.vim/AutoClose.vim	/^function! s:Backspace()$/;"	f
BackwardsSnippet	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Bclose	home/emanuelx/.vim/plugin/bclose.vim	/^command! -bang -complete=buffer -nargs=? Bclose call s:Bclose('<bang>', '<args>')$/;"	c
Bclose	home/emanuelx/.vim/plugin/bclose.vim	/^function! s:Bclose(bang, buffer)$/;"	f
Bookmark.AddBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BuildTabStops	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
Choose	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
CleanUp	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
Close	home/emanuelx/.vim/bundle/snipMate/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
ClosePair	home/emanuelx/.vim/AutoClose.vim	/^function! s:ClosePair(closer)$/;"	f
Count	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
Count	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountQuotes	home/emanuelx/.vim/AutoClose.vim	/^function! s:CountQuotes(char)$/;"	f
CreateExtraMaps	home/emanuelx/.vim/AutoClose.vim	/^function! s:CreateExtraMaps()$/;"	f
CreateMaps	home/emanuelx/.vim/AutoClose.vim	/^function! s:CreateMaps()$/;"	f
CreatePairsMaps	home/emanuelx/.vim/AutoClose.vim	/^function! s:CreatePairsMaps()$/;"	f
DefineSnips	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
DefineVariables	home/emanuelx/.vim/AutoClose.vim	/^function! s:DefineVariables()$/;"	f
Delete	home/emanuelx/.vim/AutoClose.vim	/^function! s:Delete()$/;"	f
EmptyBuffer	home/emanuelx/.vim/AutoClose.vim	/^function! s:EmptyBuffer()$/;"	f
Enter	home/emanuelx/.vim/AutoClose.vim	/^function! s:Enter()$/;"	f
EraseNCharsAtCursor	home/emanuelx/.vim/AutoClose.vim	/^function! s:EraseNCharsAtCursor(len)$/;"	f
ExtractSnips	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
Filename	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
Findcomplete	home/emanuelx/.vim/autoload/pathogen.vim	/^function! s:Findcomplete(A,L,P) " {{{1$/;"	f
FlushBuffer	home/emanuelx/.vim/AutoClose.vim	/^function! s:FlushBuffer()$/;"	f
GetCharAhead	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetCharAhead(len)$/;"	f
GetCharBehind	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetCharBehind(len)$/;"	f
GetCurrentSyntaxRegion	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetCurrentSyntaxRegion()$/;"	f
GetCurrentSyntaxRegionIf	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetCurrentSyntaxRegionIf(char)$/;"	f
GetNextChar	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetNextChar()$/;"	f
GetPrevChar	home/emanuelx/.vim/AutoClose.vim	/^function! s:GetPrevChar()$/;"	f
GetSnippet	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
Helptags	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar Helptags :call pathogen#helptags()$/;"	c
InsertPair	home/emanuelx/.vim/AutoClose.vim	/^function! s:InsertPair(opener)$/;"	f
InsertRefs	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
InsertStringAtCursor	home/emanuelx/.vim/AutoClose.vim	/^function! s:InsertStringAtCursor(str)$/;"	f
IsEmptyPair	home/emanuelx/.vim/AutoClose.vim	/^function! s:IsEmptyPair()$/;"	f
IsForbidden	home/emanuelx/.vim/AutoClose.vim	/^function! s:IsForbidden(char)$/;"	f
IsLoadedOnBuffer	home/emanuelx/.vim/AutoClose.vim	/^function! s:IsLoadedOnBuffer()$/;"	f
KeyMap.All	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
MRU	home/emanuelx/.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	home/emanuelx/.vim/plugin/mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	home/emanuelx/.vim/plugin/mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	home/emanuelx/.vim/plugin/mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Filename_Format	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Filename_Format = {$/;"	v
MRU_Include_Files	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Max_Menu_Entries	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Open_File_In_Tab	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Open_File_In_Tab(fname, esc_fname)$/;"	f
MRU_Open_File_Use_Tabs	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Open_File_Use_Tabs = 0$/;"	v
MRU_Open_Window	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Select_File_Cmd	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Use_Current_Window	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Window_Height	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_Window_Open_Always	home/emanuelx/.vim/plugin/mru.vim	/^    let MRU_Window_Open_Always = 0$/;"	v
MRU_add_files_to_menu	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	home/emanuelx/.vim/plugin/mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MakeSnip	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MatchDebug	home/emanuelx/.vim/plugin/MatchIt.vim	/^command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
Match_debug	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	home/emanuelx/.vim/plugin/MatchIt.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
MenuController.New	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
ModifyPairsList	home/emanuelx/.vim/AutoClose.vim	/^function! s:ModifyPairsList(list, pairsToAdd, openersToRemove)$/;"	f
Mru	home/emanuelx/.vim/plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
MultiMatch	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
NERDTree	home/emanuelx/.vim/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	home/emanuelx/.vim/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	home/emanuelx/.vim/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeFind	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRender	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealInFinder	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeToggle	home/emanuelx/.vim/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
OpenOrCloseTwinPair	home/emanuelx/.vim/AutoClose.vim	/^function! s:OpenOrCloseTwinPair(char)$/;"	f
ParseSkip	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseWords	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:ParseWords(groups)$/;"	f
Path.AbsolutePathFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PopBuffer	home/emanuelx/.vim/AutoClose.vim	/^function! s:PopBuffer()$/;"	f
ProcessFile	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessSnippet	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
PushBuffer	home/emanuelx/.vim/AutoClose.vim	/^function! s:PushBuffer(char)$/;"	f
Ref	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Ref(string, d, ...)$/;"	f
RemoveSnippet	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
Rename	home/emanuelx/.vim/plugin/Rename2.vim	/^command! -nargs=* -complete=file -bang Rename :call Rename("<args>", "<bang>")$/;"	c
Rename	home/emanuelx/.vim/plugin/Rename2.vim	/^function! Rename(name, bang)$/;"	f
ResetSnippets	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
Resolve	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Resolve(source, target, output)$/;"	f
SelectWord	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
ShowAvailableSnips	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
Space	home/emanuelx/.vim/AutoClose.vim	/^function! s:Space()$/;"	f
ToggleAutoClose	home/emanuelx/.vim/AutoClose.vim	/^function! s:ToggleAutoClose()$/;"	f
TreeDirNode.AbsoluteTreeRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UpdateChangedSnip	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
Ve	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Ve       :execute s:find(<count>,'edit<bang>',<q-args>,0)$/;"	c
Vedit	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vedit    :execute s:find(<count>,'edit<bang>',<q-args>,0)$/;"	c
Vopen	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vopen    :execute s:find(<count>,'edit<bang>',<q-args>,1)$/;"	c
Vpedit	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vpedit   :execute s:find(<count>,'pedit',<q-args>,<bang>1)$/;"	c
Vread	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vread    :execute s:find(<count>,'read',<q-args>,<bang>1)$/;"	c
Vsplit	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vsplit   :execute s:find(<count>,'split',<q-args>,<bang>1)$/;"	c
Vtabedit	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vtabedit :execute s:find(<count>,'tabedit',<q-args>,<bang>1)$/;"	c
Vvsplit	home/emanuelx/.vim/autoload/pathogen.vim	/^command! -bar -bang -range=1 -nargs=1 -complete=customlist,s:Findcomplete Vvsplit  :execute s:find(<count>,'vsplit',<q-args>,<bang>1)$/;"	c
Warn	home/emanuelx/.vim/plugin/bclose.vim	/^function! s:Warn(msg)$/;"	f
Wholematch	home/emanuelx/.vim/plugin/MatchIt.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
[%	home/emanuelx/.vim/plugin/MatchIt.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	home/emanuelx/.vim/plugin/MatchIt.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	home/emanuelx/.vim/plugin/MatchIt.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
]%	home/emanuelx/.vim/plugin/MatchIt.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W", "n") <CR>$/;"	m
]%	home/emanuelx/.vim/plugin/MatchIt.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W", "o") <CR>$/;"	m
]%	home/emanuelx/.vim/plugin/MatchIt.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
_	home/emanuelx/.vim/bundle/vim-better-javascript/getjsprops.js	/^var _ = function() {$/;"	f
_.getAllKeys	home/emanuelx/.vim/bundle/vim-better-javascript/getjsprops.js	/^  var getAllKeys = function(obj) {$/;"	f
_.removeDups	home/emanuelx/.vim/bundle/vim-better-javascript/getjsprops.js	/^  var removeDups = function(arr) {$/;"	f
a%	home/emanuelx/.vim/plugin/MatchIt.vim	/^vmap a% <Esc>[%v]%$/;"	m
activateNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
b:browsefilter	home/emanuelx/.vim/bundle/vim-better-javascript/ftplugin/javascript.vim	/^    let  b:browsefilter="Javascript Files (*.js)\\t*.js\\n" .$/;"	v
b:did_ftplugin	home/emanuelx/.vim/bundle/vim-better-javascript/ftplugin/javascript.vim	/^let b:did_ftplugin = 1$/;"	v
b:undo_ftplugin	home/emanuelx/.vim/bundle/vim-better-javascript/ftplugin/javascript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<" $/;"	v
backupFiles	update.pl	/^sub backupFiles() {$/;"	s
bclose_multiple	home/emanuelx/.vim/plugin/bclose.vim	/^  let bclose_multiple = 1$/;"	v
bindMappings	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:bookmarkNode(...)$/;"	f
bufInWindows	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
centerView	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
checkForActivate	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
clearBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
closeChildren	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
compareBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
completeBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
copyFolder	update.pl	/^sub copyFolder($;$;$) {$/;"	s
createFolderStructure	update.pl	/^sub createFolderStructure($) {$/;"	s
createTreeWin	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
deleteBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
displayHelp	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dumpHelp	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
exec	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
find	home/emanuelx/.vim/autoload/pathogen.vim	/^function! s:find(count,cmd,file,lcd) " {{{1$/;"	f
findAndRevealPath	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
g%	home/emanuelx/.vim/plugin/MatchIt.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	home/emanuelx/.vim/plugin/MatchIt.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	home/emanuelx/.vim/plugin/MatchIt.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:AutoClosePairs	home/emanuelx/.vim/AutoClose.vim	/^    let g:AutoClosePairs = s:ModifyPairsList($/;"	v
g:AutoClosePreserveDotReg	home/emanuelx/.vim/AutoClose.vim	/^    let g:AutoClosePreserveDotReg = 1$/;"	v
g:NERDTreeBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:colors_name	home/emanuelx/.vim/colors/termschool.vim	/^let g:colors_name = "termschool"$/;"	v
g:did_ft	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:loaded_AutoClose	home/emanuelx/.vim/AutoClose.vim	/^let g:loaded_AutoClose = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	home/emanuelx/.vim/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_pathogen	home/emanuelx/.vim/autoload/pathogen.vim	/^let g:loaded_pathogen = 1$/;"	v
g:vimjs#casesensitive	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let g:vimjs#casesensitive = 1$/;"	v
g:vimjs#chromeapis	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let g:vimjs#chromeapis = 0$/;"	v
g:vimjs#smartcomplete	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let g:vimjs#smartcomplete = 0$/;"	v
getPath	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
handleMiddleMouse	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
indentLevelFor	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
isTreeOpen	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
js#CompleteJS	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^function! js#CompleteJS(findstart, base)$/;"	f
jumpToChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
keyName	home/emanuelx/.vim/AutoClose.vim	/^function! s:keyName(char)$/;"	f
loaded_bclose	home/emanuelx/.vim/plugin/bclose.vim	/^let loaded_bclose = 1$/;"	v
loaded_matchit	home/emanuelx/.vim/plugin/MatchIt.vim	/^let loaded_matchit = 1$/;"	v
loaded_mru	home/emanuelx/.vim/plugin/mru.vim	/^let loaded_mru=1$/;"	v
loaded_nerd_tree	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
main	home/emanuelx/.scripts/teste.c	/^int main(int argc, char argv){$/;"	f
nextBufferName	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
openBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
pathogen#cycle_filetype	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#cycle_filetype() " {{{1$/;"	f
pathogen#execute	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#execute(...) abort " {{{1$/;"	f
pathogen#fnameescape	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#fnameescape(string) abort " {{{1$/;"	f
pathogen#glob	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#glob(pattern) abort " {{{1$/;"	f
pathogen#glob_directories	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#glob_directories(pattern) abort " {{{1$/;"	f
pathogen#helptags	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#helptags() abort " {{{1$/;"	f
pathogen#incubate	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#incubate(...) abort " {{{1$/;"	f
pathogen#infect	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#infect(...) abort " {{{1$/;"	f
pathogen#interpose	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#interpose(name) abort " {{{1$/;"	f
pathogen#is_disabled	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#is_disabled(path) abort " {{{1$/;"	f
pathogen#join	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#join(...) abort " {{{1$/;"	f
pathogen#legacyjoin	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#legacyjoin(...) abort " {{{1$/;"	f
pathogen#runtime_append_all_bundles	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#runtime_append_all_bundles(...) abort " {{{1$/;"	f
pathogen#runtime_findfile	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#runtime_findfile(file,count) abort "{{{1$/;"	f
pathogen#runtime_prepend_subdirectories	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#runtime_prepend_subdirectories(path) " {{{1$/;"	f
pathogen#separator	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#separator() abort " {{{1$/;"	f
pathogen#slash	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#slash() abort " {{{1$/;"	f
pathogen#split	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#split(path) abort " {{{1$/;"	f
pathogen#surround	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#surround(path) abort " {{{1$/;"	f
pathogen#uniq	home/emanuelx/.vim/autoload/pathogen.vim	/^function! pathogen#uniq(list) abort " {{{1$/;"	f
previewNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
promptToDelBuffer	home/emanuelx/.vim/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
quoteAndEscape	home/emanuelx/.vim/AutoClose.vim	/^function! s:quoteAndEscape(char)$/;"	f
refreshCurrent	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
renderBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
restoreScreenState	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
s:AutoClosePairs_FactoryDefaults	home/emanuelx/.vim/AutoClose.vim	/^let s:AutoClosePairs_FactoryDefaults = AutoClose#ParsePairs("() {} [] ` \\" '")$/;"	v
s:Bookmark	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:KeyMap	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:MenuController	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDTreeBufName	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.2.0'$/;"	v
s:Path	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:TreeDirNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:arrays	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:arrays = ['arguments', 'caller', 'concat(', 'constructor(', 'entries(', 'every(', 'fill(', 'filter(', 'find(', 'findIndex(', 'forEach(', 'indexOf(', 'isArray(', 'join(', 'keys(', 'lastIndexOf(', 'length', 'map(', 'name', 'observe(', 'pop(', 'prototype', 'push(', 'reduce(', 'reduceRight(', 'reverse(', 'shift(', 'slice(', 'some(', 'sort(', 'splice(', 'toLocaleString(', 'toString(', 'unobserve(', 'unshift(', 'values(']$/;"	v
s:bodys	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:bodys = ['ALLOW_KEYBOARD_INPUT', 'ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE', 'aLink', 'accessKey', 'addEventListener(', 'animate(', 'appendChild(', 'attributes', 'background', 'baseURI', 'bgColor', 'blur(', 'childElementCount', 'childNodes', 'children', 'classList', 'className', 'click(', 'clientHeight', 'clientLeft', 'clientTop', 'clientWidth', 'cloneNode(', 'compareDocumentPosition(', 'contains(', 'contentEditable', 'createShadowRoot(', 'dataset', 'dir', 'dispatchEvent(', 'draggable', 'firstChild', 'firstElementChild', 'focus(', 'getAttribute(', 'getAttributeNS(', 'getAttributeNode(', 'getAttributeNodeNS(', 'getBoundingClientRect(', 'getClientRects(', 'getDestinationInsertionPoints(', 'getElementsByClassName(', 'getElementsByTagName(', 'getElementsByTagNameNS(', 'hasAttribute(', 'hasAttributeNS(', 'hasAttributes(', 'hasChildNodes(', 'hidden', 'id', 'innerHTML', 'innerText', 'insertAdjacentElement(', 'insertAdjacentHTML(', 'insertAdjacentText(', 'insertBefore(', 'isContentEditable', 'isDefaultNamespace(', 'isEqualNode(', 'isSameNode(', 'lang', 'lastChild', 'lastElementChild', 'link', 'localName', 'lookupNamespaceURI(', 'lookupPrefix(', 'matches(', 'namespaceURI', 'nextElementSibling', 'nextSibling', 'nodeName', 'nodeType', 'nodeValue', 'normalize(', 'offsetHeight', 'offsetLeft', 'offsetParent', 'offsetTop', 'offsetWidth', 'onabort', 'onautocomplete', 'onautocompleteerror', 'onbeforecopy', 'onbeforecut', 'onbeforepaste', 'onbeforeunload', 'onblur', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 'oncopy', 'oncuechange', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onfocus', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onlanguagechange', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onpagehide', 'onpageshow', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectstart', 'onshow', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onunload', 'onvolumechange', 'onwaiting', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwheel', 'outerHTML', 'outerText', 'ownerDocument', 'parentElement', 'parentNode', 'prefix', 'previousElementSibling', 'previousSibling', 'querySelector(', 'querySelectorAll(', 'remove(', 'removeAttribute(', 'removeAttributeNS(', 'removeAttributeNode(', 'removeChild(', 'removeEventListener(', 'replaceChild(', 'requestPointerLock(', 'scrollByLines(', 'scrollByPages(', 'scrollHeight', 'scrollIntoView(', 'scrollIntoViewIfNeeded(', 'scrollLeft', 'scrollTop', 'scrollWidth', 'setAttribute(', 'setAttributeNS(', 'setAttributeNode(', 'setAttributeNodeNS(', 'shadowRoot', 'spellcheck', 'style', 'tabIndex', 'tagName', 'text', 'textContent', 'title', 'translate', 'vLink', 'webkitMatchesSelector(', 'webkitRequestFullScreen(', 'webkitRequestFullscreen(', 'webkitRequestPointerLock(', 'webkitdropzone']$/;"	v
s:chromeapp	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromeapp = ['getDetails(', 'getDetailsForFrame(', 'getIsInstalled(', 'installState(', 'isInstalled', 'runningState(']$/;"	v
s:chromebact	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromebact = ['disable(', 'enable(', 'getBadgeBackgroundColor(', 'getBadgeText(', 'getPopup(', 'getTitle(', 'onClicked', 'openPopup(', 'setBadgeBackgroundColor(', 'setBadgeText(', 'setIcon(', 'setPopup(', 'setTitle(']$/;"	v
s:chromecomm	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromecomm = ['getAll(', 'onCommand']$/;"	v
s:chromedown	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromedown = ['acceptDanger(', 'cancel(', 'download(', 'drag(', 'erase(', 'getFileIcon(', 'onChanged', 'onCreated', 'onDeterminingFilename', 'onErased', 'open(', 'pause(', 'removeFile(', 'resume(', 'search(', 'setShelfEnabled(', 'show(', 'showDefaultFolder(']$/;"	v
s:chromeext	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromeext = ['connect(', 'connectNative(', 'getBackgroundPage(', 'getURL(', 'getViews(', 'inIncognitoContext', 'isAllowedFileSchemeAccess(', 'isAllowedIncognitoAccess(', 'onConnect', 'onConnectExternal', 'onMessage', 'onMessageExternal', 'onRequest', 'onRequestExternal', 'sendMessage(', 'sendNativeMessage(', 'sendRequest(', 'setUpdateUrlData(']$/;"	v
s:chromehist	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromehist = ['addUrl(', 'deleteAll(', 'deleteRange(', 'deleteUrl(', 'getVisits(', 'onVisitRemoved', 'onVisited', 'search(']$/;"	v
s:chromeman	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromeman = ['getPermissionWarningsByManifest(', 'uninstallSelf(']$/;"	v
s:chromemarks	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromemarks = ['MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE', 'MAX_WRITE_OPERATIONS_PER_HOUR', 'create(', 'get(', 'getChildren(', 'getRecent(', 'getSubTree(', 'getTree(', 'move(', 'onChanged', 'onChildrenReordered', 'onCreated', 'onImportBegan', 'onImportEnded', 'onMoved', 'onRemoved', 'remove(', 'removeTree(', 'search(', 'update(']$/;"	v
s:chromeo	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromeo = ['Event(', 'app', 'bookmarks', 'browserAction', 'commands', 'csi(', 'downloads', 'extension', 'history', 'i18n', 'loadTimes(', 'management', 'permissions', 'runtime', 'sessions', 'storage', 'tabs', 'test', 'topSites', 'types', 'windows']$/;"	v
s:chromeperm	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromeperm = ['contains(', 'getAll(', 'onAdded', 'onRemoved', 'remove(', 'request(']$/;"	v
s:chromerunt	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromerunt = ['connect(', 'connectNative(', 'getBackgroundPage(', 'getManifest(', 'getPackageDirectoryEntry(', 'getPlatformInfo(', 'getURL(', 'id', 'onBrowserUpdateAvailable', 'onConnect', 'onConnectExternal', 'onInstalled', 'onMessage', 'onMessageExternal', 'onRestartRequired', 'onStartup', 'onSuspend', 'onSuspendCanceled', 'onUpdateAvailable', 'reload(', 'requestUpdateCheck(', 'restart(', 'sendMessage(', 'sendNativeMessage(', 'setUninstallURL(']$/;"	v
s:chromesess	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromesess = ['MAX_SESSION_RESULTS', 'getDevices(', 'getRecentlyClosed(', 'onChanged', 'restore(']$/;"	v
s:chromestor	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromestor = ['local', 'managed', 'onChanged', 'sync']$/;"	v
s:chromestorloc	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromestorloc = ['QUOTA_BYTES', 'clear(', 'functionSchemas', 'get(', 'getBytesInUse(', 'remove(', 'set(', 'setSchema(']$/;"	v
s:chromestorsync	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromestorsync = ['MAX_ITEMS', 'MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE', 'MAX_WRITE_OPERATIONS_PER_HOUR', 'QUOTA_BYTES', 'QUOTA_BYTES_PER_ITEM', 'clear(', 'functionSchemas', 'get(', 'getBytesInUse(', 'remove(', 'set(', 'setSchema(']$/;"	v
s:chrometabs	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chrometabs = ['captureVisibleTab(', 'connect(', 'create(', 'detectLanguage(', 'duplicate(', 'executeScript(', 'get(', 'getAllInWindow(', 'getCurrent(', 'getSelected(', 'highlight(', 'insertCSS(', 'move(', 'onActivated', 'onActiveChanged', 'onAttached', 'onCreated', 'onDetached', 'onHighlightChanged', 'onHighlighted', 'onMoved', 'onRemoved', 'onReplaced', 'onSelectionChanged', 'onUpdated', 'query(', 'reload(', 'remove(', 'sendMessage(', 'sendRequest(', 'update(']$/;"	v
s:chrometops	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chrometops = ['get(']$/;"	v
s:chromewins	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^  let s:chromewins = ['WINDOW_ID_CURRENT', 'WINDOW_ID_NONE', 'create(', 'get(', 'getAll(', 'getCurrent(', 'getLastFocused(', 'onCreated', 'onFocusChanged', 'onRemoved', 'remove(', 'update(']$/;"	v
s:console	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:console = ['assert(', 'clear(', 'count(', 'debug(', 'dir(', 'dirxml(', 'error(', 'group(', 'groupCollapsed(', 'groupEnd(', 'info(', 'log(', 'markTimeline(', 'memory', 'profile(', 'profileEnd(', 'table(', 'time(', 'timeEnd(', 'timeStamp(', 'timeline(', 'timelineEnd(', 'trace(', 'warn(']$/;"	v
s:cpo_save	home/emanuelx/.vim/bundle/vim-better-javascript/ftplugin/javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	home/emanuelx/.vim/plugin/mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:ctxs	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:ctxs = ['arc(', 'arcTo(', 'arguments', 'beginPath(', 'bezierCurveTo(', 'caller', 'canvas', 'clearRect(', 'clearShadow(', 'clip(', 'closePath(', 'constructor(', 'createImageData(', 'createLinearGradient(', 'createPattern(', 'createRadialGradient(', 'drawFocusIfNeeded(', 'drawImage(', 'drawImageFromRect(', 'ellipse(', 'fill(', 'fillRect(', 'fillStyle', 'fillText(', 'font', 'getContextAttributes(', 'getImageData(', 'getLineDash(', 'globalAlpha', 'globalCompositeOperation', 'imageSmoothingEnabled', 'isPointInPath(', 'isPointInStroke(', 'length', 'lineCap', 'lineDashOffset', 'lineJoin', 'lineTo(', 'lineWidth', 'measureText(', 'miterLimit', 'moveTo(', 'name', 'prototype', 'putImageData(', 'quadraticCurveTo(', 'rect(', 'resetTransform(', 'restore(', 'rotate(', 'save(', 'scale(', 'setAlpha(', 'setCompositeOperation(', 'setFillColor(', 'setLineCap(', 'setLineDash(', 'setLineJoin(', 'setLineWidth(', 'setMiterLimit(', 'setShadow(', 'setStrokeColor(', 'setTransform(', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'stroke(', 'strokeRect(', 'strokeStyle', 'strokeText(', 'textAlign', 'textBaseline', 'toString(', 'transform(', 'translate(', 'webkitImageSmoothingEnabled']$/;"	v
s:dates	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:dates = ['UTC(', 'arguments', 'caller', 'constructor(', 'getDate(', 'getDay(', 'getFullYear(', 'getHours(', 'getMilliseconds(', 'getMinutes(', 'getMonth(', 'getSeconds(', 'getTime(', 'getTimezoneOffset(', 'getUTCDate(', 'getUTCDay(', 'getUTCFullYear(', 'getUTCHours(', 'getUTCMilliseconds(', 'getUTCMinutes(', 'getUTCMonth(', 'getUTCSeconds(', 'getYear(', 'length', 'name', 'now(', 'parse(', 'prototype', 'setDate(', 'setFullYear(', 'setHours(', 'setMilliseconds(', 'setMinutes(', 'setMonth(', 'setSeconds(', 'setTime(', 'setUTCDate(', 'setUTCFullYear(', 'setUTCHours(', 'setUTCMilliseconds(', 'setUTCMinutes(', 'setUTCMonth(', 'setUTCSeconds(', 'setYear(', 'toDateString(', 'toGMTString(', 'toISOString(', 'toJSON(', 'toLocaleDateString(', 'toLocaleString(', 'toLocaleTimeString(', 'toString(', 'toTimeString(', 'toUTCString(', 'valueOf(']$/;"	v
s:did_snip_helper	home/emanuelx/.vim/bundle/snipMate/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	home/emanuelx/.vim/bundle/snipMate/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:docus	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:docus = ['ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE', 'URL', 'activeElement', 'addEventListener(', 'adoptNode(', 'alinkColor', 'all', 'anchors', 'appendChild(', 'applets', 'baseURI', 'bgColor', 'body', 'captureEvents(', 'caretRangeFromPoint(', 'characterSet', 'charset', 'childElementCount', 'childNodes', 'children', 'clear(', 'cloneNode(', 'close(', 'compareDocumentPosition(', 'compatMode', 'contains(', 'contentType', 'cookie', 'createAttribute(', 'createAttributeNS(', 'createCDATASection(', 'createComment(', 'createDocumentFragment(', 'createElement(', 'createElementNS(', 'createEvent(', 'createExpression(', 'createNSResolver(', 'createNodeIterator(', 'createProcessingInstruction(', 'createRange(', 'createTextNode(', 'createTreeWalker(', 'currentScript', 'defaultCharset', 'defaultView', 'designMode', 'dir', 'dispatchEvent(', 'doctype', 'documentElement', 'documentURI', 'domain', 'elementFromPoint(', 'embeds', 'evaluate(', 'execCommand(', 'exitPointerLock(', 'fgColor', 'firstChild', 'firstElementChild', 'fonts', 'forms', 'getCSSCanvasContext(', 'getElementById(', 'getElementsByClassName(', 'getElementsByName(', 'getElementsByTagName(', 'getElementsByTagNameNS(', 'getOverrideStyle(', 'getSelection(', 'hasChildNodes(', 'hasFocus(', 'head', 'hidden', 'images', 'implementation', 'importNode(', 'inputEncoding', 'insertBefore(', 'isDefaultNamespace(', 'isEqualNode(', 'isSameNode(', 'lastChild', 'lastElementChild', 'lastModified', 'linkColor', 'links', 'localName', 'location', 'lookupNamespaceURI(', 'lookupPrefix(', 'namespaceURI', 'nextSibling', 'nodeName', 'nodeType', 'nodeValue', 'normalize(', 'onabort', 'onautocomplete', 'onautocompleteerror', 'onbeforecopy', 'onbeforecut', 'onbeforepaste', 'onblur', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 'oncopy', 'oncuechange', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onpointerlockchange', 'onpointerlockerror', 'onprogress', 'onratechange', 'onreadystatechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectionchange', 'onselectstart', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange', 'onwaiting', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwebkitpointerlockchange', 'onwebkitpointerlockerror', 'onwheel', 'open(', 'ownerDocument', 'parentElement', 'parentNode', 'plugins', 'pointerLockElement', 'preferredStylesheetSet', 'previousSibling', 'queryCommandEnabled(', 'queryCommandIndeterm(', 'queryCommandState(', 'queryCommandSupported(', 'queryCommandValue(', 'querySelector(', 'querySelectorAll(', 'readyState', 'referrer', 'registerElement(', 'releaseEvents(', 'removeChild(', 'removeEventListener(', 'replaceChild(', 'rootElement', 'scripts', 'selectedStylesheetSet', 'styleSheets', 'textContent', 'title', 'visibilityState', 'vlinkColor', 'webkitCancelFullScreen(', 'webkitCurrentFullScreenElement', 'webkitExitFullscreen(', 'webkitExitPointerLock(', 'webkitFullScreenKeyboardInputAllowed', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitHidden', 'webkitIsFullScreen', 'webkitPointerLockElement', 'webkitVisibilityState', 'write(', 'writeln(', 'xmlEncoding', 'xmlStandalone', 'xmlVersion']$/;"	v
s:done_bundles	home/emanuelx/.vim/autoload/pathogen.vim	/^let s:done_bundles = {}$/;"	v
s:esc_filename_chars	home/emanuelx/.vim/plugin/mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:escape_chars	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>[]"$/;"	v
s:escape_chars	home/emanuelx/.vim/plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:evnts	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:evnts = ['AT_TARGET', 'BLUR', 'BUBBLING_PHASE', 'CAPTURING_PHASE', 'CHANGE', 'CLICK', 'DBLCLICK', 'DOM_KEY_LOCATION_LEFT', 'DOM_KEY_LOCATION_NUMPAD', 'DOM_KEY_LOCATION_RIGHT', 'DOM_KEY_LOCATION_STANDARD', 'DRAGDROP', 'FOCUS', 'KEYDOWN', 'KEYPRESS', 'KEYUP', 'MOUSEDOWN', 'MOUSEDRAG', 'MOUSEMOVE', 'MOUSEOUT', 'MOUSEOVER', 'MOUSEUP', 'NONE', 'SELECT', 'altGraphKey', 'altKey', 'bubbles', 'button', 'cancelBubble', 'cancelable', 'charCode', 'clientX', 'clientY', 'clipboardData', 'ctrlKey', 'currentTarget', 'dataTransfer', 'defaultPrevented', 'detail', 'eventPhase', 'fromElement', 'getModifierState(', 'initEvent(', 'initKeyboardEvent(', 'initMouseEvent(', 'initUIEvent(', 'keyCode', 'keyIdentifier', 'keyLocation', 'layerX', 'layerY', 'location', 'metaKey', 'movementX', 'movementY', 'offsetX', 'offsetY', 'pageX', 'pageY', 'path', 'preventDefault(', 'relatedTarget', 'repeat', 'returnValue', 'screenX', 'screenY', 'shiftKey', 'srcElement', 'stopImmediatePropagation(', 'stopPropagation(', 'target', 'timeStamp', 'toElement', 'type', 'view', 'webkitMovementX', 'webkitMovementY', 'which', 'x', 'y']$/;"	v
s:funcs	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:funcs = ['apply(', 'arguments', 'bind(', 'call(', 'caller', 'constructor(', 'length', 'name', 'prototype', 'prototype(', 'toString(']$/;"	v
s:global_cpo	home/emanuelx/.vim/AutoClose.vim	/^let s:global_cpo = &cpo " store compatible-mode in local variable$/;"	v
s:hists	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:hists = ['arguments', 'back(', 'caller', 'constructor(', 'forward(', 'go(', 'length', 'name', 'prototype', 'pushState(', 'replaceState(', 'toString(']$/;"	v
s:imags	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:imags = ['ALLOW_KEYBOARD_INPUT', 'ATTRIBUTE_NODE', 'CDATA_SECTION_NODE', 'COMMENT_NODE', 'DOCUMENT_FRAGMENT_NODE', 'DOCUMENT_NODE', 'DOCUMENT_POSITION_CONTAINED_BY', 'DOCUMENT_POSITION_CONTAINS', 'DOCUMENT_POSITION_DISCONNECTED', 'DOCUMENT_POSITION_FOLLOWING', 'DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC', 'DOCUMENT_POSITION_PRECEDING', 'DOCUMENT_TYPE_NODE', 'ELEMENT_NODE', 'ENTITY_NODE', 'ENTITY_REFERENCE_NODE', 'NOTATION_NODE', 'PROCESSING_INSTRUCTION_NODE', 'TEXT_NODE', 'accessKey', 'addEventListener(', 'align', 'alt', 'animate(', 'appendChild(', 'arguments', 'attributes', 'baseURI', 'blur(', 'border', 'caller', 'childElementCount', 'childNodes', 'children', 'classList', 'className', 'click(', 'clientHeight', 'clientLeft', 'clientTop', 'clientWidth', 'cloneNode(', 'compareDocumentPosition(', 'complete', 'constructor(', 'contains(', 'contentEditable', 'createShadowRoot(', 'crossOrigin', 'dataset', 'dir', 'dispatchEvent(', 'draggable', 'firstChild', 'firstElementChild', 'focus(', 'getAttribute(', 'getAttributeNS(', 'getAttributeNode(', 'getAttributeNodeNS(', 'getBoundingClientRect(', 'getClientRects(', 'getDestinationInsertionPoints(', 'getElementsByClassName(', 'getElementsByTagName(', 'getElementsByTagNameNS(', 'hasAttribute(', 'hasAttributeNS(', 'hasAttributes(', 'hasChildNodes(', 'height', 'hidden', 'hspace', 'id', 'innerHTML', 'innerText', 'insertAdjacentElement(', 'insertAdjacentHTML(', 'insertAdjacentText(', 'insertBefore(', 'isContentEditable', 'isDefaultNamespace(', 'isEqualNode(', 'isMap', 'isSameNode(', 'lang', 'lastChild', 'lastElementChild', 'length', 'localName', 'longDesc', 'lookupNamespaceURI(', 'lookupPrefix(', 'lowsrc', 'matches(', 'name', 'namespaceURI', 'naturalHeight', 'naturalWidth', 'nextElementSibling', 'nextSibling', 'nodeName', 'nodeType', 'nodeValue', 'normalize(', 'offsetHeight', 'offsetLeft', 'offsetParent', 'offsetTop', 'offsetWidth', 'onabort', 'onautocomplete', 'onautocompleteerror', 'onbeforecopy', 'onbeforecut', 'onbeforepaste', 'onblur', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 'oncopy', 'oncuechange', 'oncut', 'ondblclick', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onfocus', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onpaste', 'onpause', 'onplay', 'onplaying', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onselectstart', 'onshow', 'onstalled', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'onvolumechange', 'onwaiting', 'onwebkitfullscreenchange', 'onwebkitfullscreenerror', 'onwheel', 'outerHTML', 'outerText', 'ownerDocument', 'parentElement', 'parentNode', 'prefix', 'previousElementSibling', 'previousSibling', 'prototype', 'querySelector(', 'querySelectorAll(', 'remove(', 'removeAttribute(', 'removeAttributeNS(', 'removeAttributeNode(', 'removeChild(', 'removeEventListener(', 'replaceChild(', 'requestPointerLock(', 'scrollByLines(', 'scrollByPages(', 'scrollHeight', 'scrollIntoView(', 'scrollIntoViewIfNeeded(', 'scrollLeft', 'scrollTop', 'scrollWidth', 'setAttribute(', 'setAttributeNS(', 'setAttributeNode(', 'setAttributeNodeNS(', 'shadowRoot', 'spellcheck', 'src', 'srcset', 'style', 'tabIndex', 'tagName', 'textContent', 'title', 'translate', 'useMap', 'vspace', 'webkitMatchesSelector(', 'webkitRequestFullScreen(', 'webkitRequestFullscreen(', 'webkitRequestPointerLock(', 'webkitdropzone', 'width', 'x', 'y']$/;"	v
s:keywords	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:keywords = ['abstract', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'continue', 'debugger', 'default', 'delete', 'do', 'double ', 'else', 'enum', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'goto', 'if', 'implements', 'import', 'in ', 'instanceof', 'int', 'interface', 'long', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super ', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'volatile', 'while', 'with', 'console']$/;"	v
s:last_mps	home/emanuelx/.vim/plugin/MatchIt.vim	/^let s:last_mps = ""$/;"	v
s:last_words	home/emanuelx/.vim/plugin/MatchIt.vim	/^let s:last_words = ":"$/;"	v
s:locas	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:locas = ['ancestorOrigins', 'assign(', 'hash', 'host', 'hostname', 'href', 'origin', 'pathname', 'port', 'protocol', 'reload(', 'replace(', 'search', 'toString(', 'valueOf(']$/;"	v
s:maths	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:maths = ['E', 'LN10', 'LN2', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2', 'abs(', 'acos(', 'acosh(', 'asin(', 'asinh(', 'atan(', 'atan2(', 'atanh(', 'cbrt(', 'ceil(', 'clz32(', 'cos(', 'cosh(', 'exp(', 'expm1(', 'floor(', 'fround(', 'hypot(', 'imul(', 'log(', 'log10(', 'log1p(', 'log2(', 'max(', 'min(', 'pow(', 'random(', 'round(', 'sign(', 'sin(', 'sinh(', 'sqrt(', 'tan(', 'tanh(', 'trunc(']$/;"	v
s:movementKeys	home/emanuelx/.vim/AutoClose.vim	/^let s:movementKeys = split('ESC UP DOWN LEFT RIGHT HOME END PAGEUP PAGEDOWN')$/;"	v
s:mru_list_locked	home/emanuelx/.vim/plugin/mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:navis	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:navis = ['appCodeName', 'appName', 'appVersion', 'arguments', 'caller', 'constructor(', 'cookieEnabled', 'doNotTrack', 'geolocation', 'getGamepads(', 'getMediaDevices(', 'getStorageUpdates(', 'hardwareConcurrency', 'javaEnabled(', 'language', 'languages', 'length', 'maxTouchPoints', 'mimeTypes', 'name', 'onLine', 'platform', 'plugins', 'product', 'productSub', 'prototype', 'registerProtocolHandler(', 'toString(', 'userAgent', 'vendor', 'vendorSub', 'vibrate(', 'webkitGetGamepads(', 'webkitGetUserMedia(', 'webkitPersistentStorage', 'webkitTemporaryStorage']$/;"	v
s:next_buffer_number	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:nfilter	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:nfilter = ['FILTER_ACCEPT', 'FILTER_REJECT', 'FILTER_SKIP', 'SHOW_ALL', 'SHOW_ATTRIBUTE', 'SHOW_CDATA_SECTION', 'SHOW_COMMENT', 'SHOW_DOCUMENT', 'SHOW_DOCUMENT_FRAGMENT', 'SHOW_DOCUMENT_TYPE', 'SHOW_ELEMENT', 'SHOW_ENTITY', 'SHOW_ENTITY_REFERENCE', 'SHOW_NOTATION', 'SHOW_PROCESSING_INSTRUCTION', 'SHOW_TEXT', 'acceptNode(', 'arguments', 'caller', 'constructor(', 'length', 'name', 'prototype', 'toString(']$/;"	v
s:niters	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:niters = ['arguments', 'caller', 'constructor(', 'detach(', 'expandEntityReferences', 'filter', 'length', 'name', 'nextNode(', 'pointerBeforeReferenceNode', 'previousNode(', 'prototype', 'referenceNode', 'root', 'toString(', 'whatToShow']$/;"	v
s:notslash	home/emanuelx/.vim/plugin/MatchIt.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:numbs	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:numbs = ['EPSILON', 'MAX_SAFE_INTEGER', 'MAX_VALUE', 'MIN_SAFE_INTEGER', 'MIN_VALUE', 'NEGATIVE_INFINITY', 'NaN', 'POSITIVE_INFINITY', 'arguments', 'caller', 'constructor(', 'isFinite(', 'isInteger(', 'isNaN(', 'isSafeInteger(', 'length', 'name', 'parseFloat(', 'parseInt(', 'prototype', 'toExponential(', 'toFixed(', 'toLocaleString(', 'toPrecision(', 'toString(', 'valueOf(']$/;"	v
s:objes	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:objes = ['arguments', 'caller', 'constructor(', 'create(', 'defineProperties(', 'defineProperty(', 'deliverChangeRecords(', 'freeze(', 'getNotifier(', 'getOwnPropertyDescriptor(', 'getOwnPropertyNames(', 'getOwnPropertySymbols(', 'getPrototypeOf(', 'hasOwnProperty(', 'is(', 'isExtensible(', 'isFrozen(', 'isPrototypeOf(', 'isSealed(', 'keys(', 'length', 'name', 'observe(', 'preventExtensions(', 'propertyIsEnumerable(', 'prototype', 'seal(', 'setPrototypeOf(', 'toLocaleString(', 'toString(', 'unobserve(', 'valueOf(']$/;"	v
s:old_cpo	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:pumMovementKeys	home/emanuelx/.vim/AutoClose.vim	/^let s:pumMovementKeys = split('UP DOWN PAGEUP PAGEDOWN')$/;"	v
s:reges	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:reges = ['arguments', 'caller', 'compile(', 'constructor(', 'exec(', 'global', 'ignoreCase', 'input', 'lastIndex', 'lastMatch', 'lastParen', 'leftContext', 'length', 'multiline', 'name', 'prototype', 'rightContext', 'source', 'test(', 'toString(']$/;"	v
s:running_windows	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	home/emanuelx/.vim/plugin/MatchIt.vim	/^let s:save_cpo = &cpo$/;"	v
s:scres	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:scres = ['arguments', 'availHeight', 'availLeft', 'availTop', 'availWidth', 'caller', 'colorDepth', 'constructor(', 'height', 'length', 'name', 'pixelDepth', 'prototype', 'toString(', 'width']$/;"	v
s:snippets	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:storage	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:storage = ['arguments', 'caller', 'clear(', 'constructor(', 'getItem(', 'key(', 'length', 'name', 'prototype', 'removeItem(', 'setItem(', 'toString(']$/;"	v
s:stris	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:stris = ['anchor(', 'arguments', 'big(', 'blink(', 'bold(', 'caller', 'charAt(', 'charCodeAt(', 'concat(', 'constructor(', 'contains(', 'endsWith(', 'fixed(', 'fontcolor(', 'fontsize(', 'fromCharCode(', 'indexOf(', 'italics(', 'lastIndexOf(', 'length', 'link(', 'localeCompare(', 'match(', 'name', 'normalize(', 'prototype', 'repeat(', 'replace(', 'search(', 'slice(', 'small(', 'split(', 'startsWith(', 'strike(', 'sub(', 'substr(', 'substring(', 'sup(', 'toLocaleLowerCase(', 'toLocaleUpperCase(', 'toLowerCase(', 'toString(', 'toUpperCase(', 'trim(', 'trimLeft(', 'trimRight(', 'valueOf(']$/;"	v
s:styls	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:styls = ['alignContent', 'alignItems', 'alignSelf', 'alignmentBaseline', 'all', 'backfaceVisibility', 'background', 'backgroundAttachment', 'backgroundBlendMode', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPosition', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundRepeatX', 'backgroundRepeatY', 'backgroundSize', 'baselineShift', 'border', 'borderBottom', 'borderBottomColor', 'borderBottomLeftRadius', 'borderBottomRightRadius', 'borderBottomStyle', 'borderBottomWidth', 'borderCollapse', 'borderColor', 'borderImage', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeft', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRadius', 'borderRight', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderSpacing', 'borderStyle', 'borderTop', 'borderTopColor', 'borderTopLeftRadius', 'borderTopRightRadius', 'borderTopStyle', 'borderTopWidth', 'borderWidth', 'bottom', 'boxShadow', 'boxSizing', 'bufferedRendering', 'captionSide', 'clear', 'clip', 'clipPath', 'clipRule', 'color', 'colorInterpolation', 'colorInterpolationFilters', 'colorRendering', 'content', 'counterIncrement', 'counterReset', 'cssText', 'cursor', 'direction', 'display', 'dominantBaseline', 'emptyCells', 'enableBackground', 'fill', 'fillOpacity', 'fillRule', 'filter', 'flex', 'flexBasis', 'flexDirection', 'flexFlow', 'flexGrow', 'flexShrink', 'flexWrap', 'float', 'floodColor', 'floodOpacity', 'font', 'fontFamily', 'fontKerning', 'fontSize', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantLigatures', 'fontWeight', 'getPropertyCSSValue(', 'getPropertyPriority(', 'getPropertyValue(', 'glyphOrientationHorizontal', 'glyphOrientationVertical', 'height', 'imageRendering', 'item(', 'justifyContent', 'left', 'length', 'letterSpacing', 'lightingColor', 'lineHeight', 'listStyle', 'listStyleImage', 'listStylePosition', 'listStyleType', 'margin', 'marginBottom', 'marginLeft', 'marginRight', 'marginTop', 'marker', 'markerEnd', 'markerMid', 'markerStart', 'mask', 'maskType', 'maxHeight', 'maxWidth', 'maxZoom', 'minHeight', 'minWidth', 'minZoom', 'objectFit', 'objectPosition', 'opacity', 'order', 'orientation', 'orphans', 'outline', 'outlineColor', 'outlineOffset', 'outlineStyle', 'outlineWidth', 'overflow', 'overflowWrap', 'overflowX', 'overflowY', 'padding', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'page', 'pageBreakAfter', 'pageBreakBefore', 'pageBreakInside', 'paintOrder', 'parentRule', 'perspective', 'perspectiveOrigin', 'pointerEvents', 'position', 'quotes', 'removeProperty(', 'resize', 'right', 'setProperty(', 'shapeImageThreshold', 'shapeMargin', 'shapeOutside', 'shapeRendering', 'size', 'speak', 'src', 'stopColor', 'stopOpacity', 'stroke', 'strokeDasharray', 'strokeDashoffset', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'tabSize', 'tableLayout', 'textAlign', 'textAnchor', 'textDecoration', 'textIndent', 'textLineThroughColor', 'textLineThroughMode', 'textLineThroughStyle', 'textLineThroughWidth', 'textOverflow', 'textOverlineColor', 'textOverlineMode', 'textOverlineStyle', 'textOverlineWidth', 'textRendering', 'textShadow', 'textTransform', 'textUnderlineColor', 'textUnderlineMode', 'textUnderlineStyle', 'textUnderlineWidth', 'top', 'touchAction', 'transform', 'transformOrigin', 'transformStyle', 'transition', 'transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction', 'unicodeBidi', 'unicodeRange', 'userZoom', 'vectorEffect', 'verticalAlign', 'visibility', 'webkitAnimation', 'webkitAnimationDelay', 'webkitAnimationDirection', 'webkitAnimationDuration', 'webkitAnimationFillMode', 'webkitAnimationIterationCount', 'webkitAnimationName', 'webkitAnimationPlayState', 'webkitAnimationTimingFunction', 'webkitAppRegion', 'webkitAppearance', 'webkitAspectRatio', 'webkitBackfaceVisibility', 'webkitBackgroundClip', 'webkitBackgroundComposite', 'webkitBackgroundOrigin', 'webkitBackgroundSize', 'webkitBorderAfter', 'webkitBorderAfterColor', 'webkitBorderAfterStyle', 'webkitBorderAfterWidth', 'webkitBorderBefore', 'webkitBorderBeforeColor', 'webkitBorderBeforeStyle', 'webkitBorderBeforeWidth', 'webkitBorderEnd', 'webkitBorderEndColor', 'webkitBorderEndStyle', 'webkitBorderEndWidth', 'webkitBorderFit', 'webkitBorderHorizontalSpacing', 'webkitBorderImage', 'webkitBorderRadius', 'webkitBorderStart', 'webkitBorderStartColor', 'webkitBorderStartStyle', 'webkitBorderStartWidth', 'webkitBorderVerticalSpacing', 'webkitBoxAlign', 'webkitBoxDecorationBreak', 'webkitBoxDirection', 'webkitBoxFlex', 'webkitBoxFlexGroup', 'webkitBoxLines', 'webkitBoxOrdinalGroup', 'webkitBoxOrient', 'webkitBoxPack', 'webkitBoxReflect', 'webkitBoxShadow', 'webkitClipPath', 'webkitColumnBreakAfter', 'webkitColumnBreakBefore', 'webkitColumnBreakInside', 'webkitColumnCount', 'webkitColumnGap', 'webkitColumnRule', 'webkitColumnRuleColor', 'webkitColumnRuleStyle', 'webkitColumnRuleWidth', 'webkitColumnSpan', 'webkitColumnWidth', 'webkitColumns', 'webkitFilter', 'webkitFontFeatureSettings', 'webkitFontSizeDelta', 'webkitFontSmoothing', 'webkitHighlight', 'webkitHyphenateCharacter', 'webkitLineBoxContain', 'webkitLineBreak', 'webkitLineClamp', 'webkitLocale', 'webkitLogicalHeight', 'webkitLogicalWidth', 'webkitMarginAfter', 'webkitMarginAfterCollapse', 'webkitMarginBefore', 'webkitMarginBeforeCollapse', 'webkitMarginBottomCollapse', 'webkitMarginCollapse', 'webkitMarginEnd', 'webkitMarginStart', 'webkitMarginTopCollapse', 'webkitMask', 'webkitMaskBoxImage', 'webkitMaskBoxImageOutset', 'webkitMaskBoxImageRepeat', 'webkitMaskBoxImageSlice', 'webkitMaskBoxImageSource', 'webkitMaskBoxImageWidth', 'webkitMaskClip', 'webkitMaskComposite', 'webkitMaskImage', 'webkitMaskOrigin', 'webkitMaskPosition', 'webkitMaskPositionX', 'webkitMaskPositionY', 'webkitMaskRepeat', 'webkitMaskRepeatX', 'webkitMaskRepeatY', 'webkitMaskSize', 'webkitMaxLogicalHeight', 'webkitMaxLogicalWidth', 'webkitMinLogicalHeight', 'webkitMinLogicalWidth', 'webkitPaddingAfter', 'webkitPaddingBefore', 'webkitPaddingEnd', 'webkitPaddingStart', 'webkitPerspective', 'webkitPerspectiveOrigin', 'webkitPerspectiveOriginX', 'webkitPerspectiveOriginY', 'webkitPrintColorAdjust', 'webkitRtlOrdering', 'webkitRubyPosition', 'webkitTapHighlightColor', 'webkitTextCombine', 'webkitTextDecorationsInEffect', 'webkitTextEmphasis', 'webkitTextEmphasisColor', 'webkitTextEmphasisPosition', 'webkitTextEmphasisStyle', 'webkitTextFillColor', 'webkitTextOrientation', 'webkitTextSecurity', 'webkitTextStroke', 'webkitTextStrokeColor', 'webkitTextStrokeWidth', 'webkitTransform', 'webkitTransformOrigin', 'webkitTransformOriginX', 'webkitTransformOriginY', 'webkitTransformOriginZ', 'webkitTransformStyle', 'webkitTransition', 'webkitTransitionDelay', 'webkitTransitionDuration', 'webkitTransitionProperty', 'webkitTransitionTimingFunction', 'webkitUserDrag', 'webkitUserModify', 'webkitUserSelect', 'webkitWritingMode', 'whiteSpace', 'widows', 'width', 'willChange', 'wordBreak', 'wordSpacing', 'wordWrap', 'writingMode', 'zIndex', 'zoom']$/;"	v
s:tree_markup_reg	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~▾▸ ]\\+'$/;"	v
s:tree_up_dir_line	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_up_dir_line	home/emanuelx/.vim/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	home/emanuelx/.vim/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:twalkers	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:twalkers = ['arguments', 'caller', 'constructor(', 'currentNode', 'expandEntityReferences', 'filter', 'firstChild(', 'lastChild(', 'length', 'name', 'nextNode(', 'nextSibling(', 'parentNode(', 'previousNode(', 'previousSibling(', 'prototype', 'root', 'toString(', 'whatToShow']$/;"	v
s:vopen_warning	home/emanuelx/.vim/autoload/pathogen.vim	/^let s:vopen_warning = 0$/;"	v
s:webgl	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:webgl = ['ACTIVE_ATTRIBUTES', 'ACTIVE_TEXTURE', 'ACTIVE_UNIFORMS', 'ALIASED_LINE_WIDTH_RANGE', 'ALIASED_POINT_SIZE_RANGE', 'ALPHA', 'ALPHA_BITS', 'ALWAYS', 'ARRAY_BUFFER', 'ARRAY_BUFFER_BINDING', 'ATTACHED_SHADERS', 'BACK', 'BLEND', 'BLEND_COLOR', 'BLEND_DST_ALPHA', 'BLEND_DST_RGB', 'BLEND_EQUATION', 'BLEND_EQUATION_ALPHA', 'BLEND_EQUATION_RGB', 'BLEND_SRC_ALPHA', 'BLEND_SRC_RGB', 'BLUE_BITS', 'BOOL', 'BOOL_VEC2', 'BOOL_VEC3', 'BOOL_VEC4', 'BROWSER_DEFAULT_WEBGL', 'BUFFER_SIZE', 'BUFFER_USAGE', 'BYTE', 'CCW', 'CLAMP_TO_EDGE', 'COLOR_ATTACHMENT0', 'COLOR_BUFFER_BIT', 'COLOR_CLEAR_VALUE', 'COLOR_WRITEMASK', 'COMPILE_STATUS', 'COMPRESSED_TEXTURE_FORMATS', 'CONSTANT_ALPHA', 'CONSTANT_COLOR', 'CONTEXT_LOST_WEBGL', 'CULL_FACE', 'CULL_FACE_MODE', 'CURRENT_PROGRAM', 'CURRENT_VERTEX_ATTRIB', 'CW', 'DECR', 'DECR_WRAP', 'DELETE_STATUS', 'DEPTH_ATTACHMENT', 'DEPTH_BITS', 'DEPTH_BUFFER_BIT', 'DEPTH_CLEAR_VALUE', 'DEPTH_COMPONENT', 'DEPTH_COMPONENT16', 'DEPTH_FUNC', 'DEPTH_RANGE', 'DEPTH_STENCIL', 'DEPTH_STENCIL_ATTACHMENT', 'DEPTH_TEST', 'DEPTH_WRITEMASK', 'DITHER', 'DONT_CARE', 'DST_ALPHA', 'DST_COLOR', 'DYNAMIC_DRAW', 'ELEMENT_ARRAY_BUFFER', 'ELEMENT_ARRAY_BUFFER_BINDING', 'EQUAL', 'FASTEST', 'FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'FRAGMENT_SHADER', 'FRAMEBUFFER', 'FRAMEBUFFER_ATTACHMENT_OBJECT_NAME', 'FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE', 'FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE', 'FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL', 'FRAMEBUFFER_BINDING', 'FRAMEBUFFER_COMPLETE', 'FRAMEBUFFER_INCOMPLETE_ATTACHMENT', 'FRAMEBUFFER_INCOMPLETE_DIMENSIONS', 'FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT', 'FRAMEBUFFER_UNSUPPORTED', 'FRONT', 'FRONT_AND_BACK', 'FRONT_FACE', 'FUNC_ADD', 'FUNC_REVERSE_SUBTRACT', 'FUNC_SUBTRACT', 'GENERATE_MIPMAP_HINT', 'GEQUAL', 'GREATER', 'GREEN_BITS', 'HIGH_FLOAT', 'HIGH_INT', 'IMPLEMENTATION_COLOR_READ_FORMAT', 'IMPLEMENTATION_COLOR_READ_TYPE', 'INCR', 'INCR_WRAP', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'INVALID_ENUM', 'INVALID_FRAMEBUFFER_OPERATION', 'INVALID_OPERATION', 'INVALID_VALUE', 'INVERT', 'KEEP', 'LEQUAL', 'LESS', 'LINEAR', 'LINEAR_MIPMAP_LINEAR', 'LINEAR_MIPMAP_NEAREST', 'LINES', 'LINE_LOOP', 'LINE_STRIP', 'LINE_WIDTH', 'LINK_STATUS', 'LOW_FLOAT', 'LOW_INT', 'LUMINANCE', 'LUMINANCE_ALPHA', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', 'MAX_CUBE_MAP_TEXTURE_SIZE', 'MAX_FRAGMENT_UNIFORM_VECTORS', 'MAX_RENDERBUFFER_SIZE', 'MAX_TEXTURE_IMAGE_UNITS', 'MAX_TEXTURE_SIZE', 'MAX_VARYING_VECTORS', 'MAX_VERTEX_ATTRIBS', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', 'MAX_VERTEX_UNIFORM_VECTORS', 'MAX_VIEWPORT_DIMS', 'MEDIUM_FLOAT', 'MEDIUM_INT', 'MIRRORED_REPEAT', 'NEAREST', 'NEAREST_MIPMAP_LINEAR', 'NEAREST_MIPMAP_NEAREST', 'NEVER', 'NICEST', 'NONE', 'NOTEQUAL', 'NO_ERROR', 'ONE', 'ONE_MINUS_CONSTANT_ALPHA', 'ONE_MINUS_CONSTANT_COLOR', 'ONE_MINUS_DST_ALPHA', 'ONE_MINUS_DST_COLOR', 'ONE_MINUS_SRC_ALPHA', 'ONE_MINUS_SRC_COLOR', 'OUT_OF_MEMORY', 'PACK_ALIGNMENT', 'POINTS', 'POLYGON_OFFSET_FACTOR', 'POLYGON_OFFSET_FILL', 'POLYGON_OFFSET_UNITS', 'RED_BITS', 'RENDERBUFFER', 'RENDERBUFFER_ALPHA_SIZE', 'RENDERBUFFER_BINDING', 'RENDERBUFFER_BLUE_SIZE', 'RENDERBUFFER_DEPTH_SIZE', 'RENDERBUFFER_GREEN_SIZE', 'RENDERBUFFER_HEIGHT', 'RENDERBUFFER_INTERNAL_FORMAT', 'RENDERBUFFER_RED_SIZE', 'RENDERBUFFER_STENCIL_SIZE', 'RENDERBUFFER_WIDTH', 'RENDERER', 'REPEAT', 'REPLACE', 'RGB', 'RGB565', 'RGB5_A1', 'RGBA', 'RGBA4', 'SAMPLER_2D', 'SAMPLER_CUBE', 'SAMPLES', 'SAMPLE_ALPHA_TO_COVERAGE', 'SAMPLE_BUFFERS', 'SAMPLE_COVERAGE', 'SAMPLE_COVERAGE_INVERT', 'SAMPLE_COVERAGE_VALUE', 'SCISSOR_BOX', 'SCISSOR_TEST', 'SHADER_TYPE', 'SHADING_LANGUAGE_VERSION', 'SHORT', 'SRC_ALPHA', 'SRC_ALPHA_SATURATE', 'SRC_COLOR', 'STATIC_DRAW', 'STENCIL_ATTACHMENT', 'STENCIL_BACK_FAIL', 'STENCIL_BACK_FUNC', 'STENCIL_BACK_PASS_DEPTH_FAIL', 'STENCIL_BACK_PASS_DEPTH_PASS', 'STENCIL_BACK_REF', 'STENCIL_BACK_VALUE_MASK', 'STENCIL_BACK_WRITEMASK', 'STENCIL_BITS', 'STENCIL_BUFFER_BIT', 'STENCIL_CLEAR_VALUE', 'STENCIL_FAIL', 'STENCIL_FUNC', 'STENCIL_INDEX', 'STENCIL_INDEX8', 'STENCIL_PASS_DEPTH_FAIL', 'STENCIL_PASS_DEPTH_PASS', 'STENCIL_REF', 'STENCIL_TEST', 'STENCIL_VALUE_MASK', 'STENCIL_WRITEMASK', 'STREAM_DRAW', 'SUBPIXEL_BITS', 'TEXTURE', 'TEXTURE0', 'TEXTURE1', 'TEXTURE10', 'TEXTURE11', 'TEXTURE12', 'TEXTURE13', 'TEXTURE14', 'TEXTURE15', 'TEXTURE16', 'TEXTURE17', 'TEXTURE18', 'TEXTURE19', 'TEXTURE2', 'TEXTURE20', 'TEXTURE21', 'TEXTURE22', 'TEXTURE23', 'TEXTURE24', 'TEXTURE25', 'TEXTURE26', 'TEXTURE27', 'TEXTURE28', 'TEXTURE29', 'TEXTURE3', 'TEXTURE30', 'TEXTURE31', 'TEXTURE4', 'TEXTURE5', 'TEXTURE6', 'TEXTURE7', 'TEXTURE8', 'TEXTURE9', 'TEXTURE_2D', 'TEXTURE_BINDING_2D', 'TEXTURE_BINDING_CUBE_MAP', 'TEXTURE_CUBE_MAP', 'TEXTURE_CUBE_MAP_NEGATIVE_X', 'TEXTURE_CUBE_MAP_NEGATIVE_Y', 'TEXTURE_CUBE_MAP_NEGATIVE_Z', 'TEXTURE_CUBE_MAP_POSITIVE_X', 'TEXTURE_CUBE_MAP_POSITIVE_Y', 'TEXTURE_CUBE_MAP_POSITIVE_Z', 'TEXTURE_MAG_FILTER', 'TEXTURE_MIN_FILTER', 'TEXTURE_WRAP_S', 'TEXTURE_WRAP_T', 'TRIANGLES', 'TRIANGLE_FAN', 'TRIANGLE_STRIP', 'UNPACK_ALIGNMENT', 'UNPACK_COLORSPACE_CONVERSION_WEBGL', 'UNPACK_FLIP_Y_WEBGL', 'UNPACK_PREMULTIPLY_ALPHA_WEBGL', 'UNSIGNED_BYTE', 'UNSIGNED_INT', 'UNSIGNED_SHORT', 'UNSIGNED_SHORT_4_4_4_4', 'UNSIGNED_SHORT_5_5_5_1', 'UNSIGNED_SHORT_5_6_5', 'VALIDATE_STATUS', 'VENDOR', 'VERSION', 'VERTEX_ATTRIB_ARRAY_BUFFER_BINDING', 'VERTEX_ATTRIB_ARRAY_ENABLED', 'VERTEX_ATTRIB_ARRAY_NORMALIZED', 'VERTEX_ATTRIB_ARRAY_POINTER', 'VERTEX_ATTRIB_ARRAY_SIZE', 'VERTEX_ATTRIB_ARRAY_STRIDE', 'VERTEX_ATTRIB_ARRAY_TYPE', 'VERTEX_SHADER', 'VIEWPORT', 'ZERO', 'activeTexture(', 'attachShader(', 'bindAttribLocation(', 'bindBuffer(', 'bindFramebuffer(', 'bindRenderbuffer(', 'bindTexture(', 'blendColor(', 'blendEquation(', 'blendEquationSeparate(', 'blendFunc(', 'blendFuncSeparate(', 'bufferData(', 'bufferSubData(', 'canvas', 'checkFramebufferStatus(', 'clear(', 'clearColor(', 'clearDepth(', 'clearStencil(', 'colorMask(', 'compileShader(', 'compressedTexImage2D(', 'compressedTexSubImage2D(', 'copyTexImage2D(', 'copyTexSubImage2D(', 'createBuffer(', 'createFramebuffer(', 'createProgram(', 'createRenderbuffer(', 'createShader(', 'createTexture(', 'cullFace(', 'deleteBuffer(', 'deleteFramebuffer(', 'deleteProgram(', 'deleteRenderbuffer(', 'deleteShader(', 'deleteTexture(', 'depthFunc(', 'depthMask(', 'depthRange(', 'detachShader(', 'disable(', 'disableVertexAttribArray(', 'drawArrays(', 'drawElements(', 'drawingBufferHeight', 'drawingBufferWidth', 'enable(', 'enableVertexAttribArray(', 'finish(', 'flush(', 'framebufferRenderbuffer(', 'framebufferTexture2D(', 'frontFace(', 'generateMipmap(', 'getActiveAttrib(', 'getActiveUniform(', 'getAttachedShaders(', 'getAttribLocation(', 'getBufferParameter(', 'getContextAttributes(', 'getError(', 'getExtension(', 'getFramebufferAttachmentParameter(', 'getParameter(', 'getProgramInfoLog(', 'getProgramParameter(', 'getRenderbufferParameter(', 'getShaderInfoLog(', 'getShaderParameter(', 'getShaderPrecisionFormat(', 'getShaderSource(', 'getSupportedExtensions(', 'getTexParameter(', 'getUniform(', 'getUniformLocation(', 'getVertexAttrib(', 'getVertexAttribOffset(', 'hint(', 'isBuffer(', 'isContextLost(', 'isEnabled(', 'isFramebuffer(', 'isProgram(', 'isRenderbuffer(', 'isShader(', 'isTexture(', 'lineWidth(', 'linkProgram(', 'pixelStorei(', 'polygonOffset(', 'readPixels(', 'renderbufferStorage(', 'sampleCoverage(', 'scissor(', 'shaderSource(', 'stencilFunc(', 'stencilFuncSeparate(', 'stencilMask(', 'stencilMaskSeparate(', 'stencilOp(', 'stencilOpSeparate(', 'texImage2D(', 'texParameterf(', 'texParameteri(', 'texSubImage2D(', 'uniform1f(', 'uniform1fv(', 'uniform1i(', 'uniform1iv(', 'uniform2f(', 'uniform2fv(', 'uniform2i(', 'uniform2iv(', 'uniform3f(', 'uniform3fv(', 'uniform3i(', 'uniform3iv(', 'uniform4f(', 'uniform4fv(', 'uniform4i(', 'uniform4iv(', 'uniformMatrix2fv(', 'uniformMatrix3fv(', 'uniformMatrix4fv(', 'useProgram(', 'validateProgram(', 'vertexAttrib1f(', 'vertexAttrib1fv(', 'vertexAttrib2f(', 'vertexAttrib2fv(', 'vertexAttrib3f(', 'vertexAttrib3fv(', 'vertexAttrib4f(', 'vertexAttrib4fv(', 'vertexAttribPointer(', 'viewport(']$/;"	v
s:winds	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:winds = ['AnalyserNode(', 'ApplicationCache(', 'ApplicationCacheErrorEvent(', 'Array(', 'ArrayBuffer(', 'Attr(', 'Audio(', 'AudioBuffer(', 'AudioBufferSourceNode(', 'AudioContext(', 'AudioDestinationNode(', 'AudioListener(', 'AudioNode(', 'AudioParam(', 'AudioProcessingEvent(', 'AutocompleteErrorEvent(', 'BarProp(', 'BeforeUnloadEvent(', 'BiquadFilterNode(', 'Blob(', 'Boolean(', 'CDATASection(', 'CSS', 'CSSCharsetRule(', 'CSSFontFaceRule(', 'CSSImportRule(', 'CSSKeyframeRule(', 'CSSKeyframesRule(', 'CSSMediaRule(', 'CSSPageRule(', 'CSSPrimitiveValue(', 'CSSRule(', 'CSSRuleList(', 'CSSStyleDeclaration(', 'CSSStyleRule(', 'CSSStyleSheet(', 'CSSUnknownRule(', 'CSSValue(', 'CSSValueList(', 'CSSViewportRule(', 'CanvasGradient(', 'CanvasPattern(', 'CanvasRenderingContext2D(', 'ChannelMergerNode(', 'ChannelSplitterNode(', 'CharacterData(', 'ClientRect(', 'ClientRectList(', 'CloseEvent(', 'Comment(', 'CompositionEvent(', 'ConvolverNode(', 'Counter(', 'CustomEvent(', 'DOMError(', 'DOMException(', 'DOMImplementation(', 'DOMParser(', 'DOMSettableTokenList(', 'DOMStringList(', 'DOMStringMap(', 'DOMTokenList(', 'DataTransfer(', 'DataTransferItemList(', 'DataView(', 'Date(', 'DelayNode(', 'DeviceMotionEvent(', 'DeviceOrientationEvent(', 'Document(', 'DocumentFragment(', 'DocumentType(', 'DynamicsCompressorNode(', 'Element(', 'Error(', 'ErrorEvent(', 'EvalError(', 'Event(', 'EventSource(', 'EventTarget(', 'File(', 'FileError(', 'FileList(', 'FileReader(', 'Float32Array(', 'Float64Array(', 'FocusEvent(', 'FontFace(', 'FormData(', 'Function(', 'GainNode(', 'Gamepad(', 'GamepadEvent(', 'HTMLAllCollection(', 'HTMLAnchorElement(', 'HTMLAppletElement(', 'HTMLAreaElement(', 'HTMLAudioElement(', 'HTMLBRElement(', 'HTMLBaseElement(', 'HTMLBodyElement(', 'HTMLButtonElement(', 'HTMLCanvasElement(', 'HTMLCollection(', 'HTMLContentElement(', 'HTMLDListElement(', 'HTMLDataListElement(', 'HTMLDialogElement(', 'HTMLDirectoryElement(', 'HTMLDivElement(', 'HTMLDocument(', 'HTMLElement(', 'HTMLEmbedElement(', 'HTMLFieldSetElement(', 'HTMLFontElement(', 'HTMLFormControlsCollection(', 'HTMLFormElement(', 'HTMLFrameElement(', 'HTMLFrameSetElement(', 'HTMLHRElement(', 'HTMLHeadElement(', 'HTMLHeadingElement(', 'HTMLHtmlElement(', 'HTMLIFrameElement(', 'HTMLImageElement(', 'HTMLInputElement(', 'HTMLKeygenElement(', 'HTMLLIElement(', 'HTMLLabelElement(', 'HTMLLegendElement(', 'HTMLLinkElement(', 'HTMLMapElement(', 'HTMLMarqueeElement(', 'HTMLMediaElement(', 'HTMLMenuElement(', 'HTMLMetaElement(', 'HTMLMeterElement(', 'HTMLModElement(', 'HTMLOListElement(', 'HTMLObjectElement(', 'HTMLOptGroupElement(', 'HTMLOptionElement(', 'HTMLOptionsCollection(', 'HTMLOutputElement(', 'HTMLParagraphElement(', 'HTMLParamElement(', 'HTMLPreElement(', 'HTMLProgressElement(', 'HTMLQuoteElement(', 'HTMLScriptElement(', 'HTMLSelectElement(', 'HTMLShadowElement(', 'HTMLSourceElement(', 'HTMLSpanElement(', 'HTMLStyleElement(', 'HTMLTableCaptionElement(', 'HTMLTableCellElement(', 'HTMLTableColElement(', 'HTMLTableElement(', 'HTMLTableRowElement(', 'HTMLTableSectionElement(', 'HTMLTemplateElement(', 'HTMLTextAreaElement(', 'HTMLTitleElement(', 'HTMLTrackElement(', 'HTMLUListElement(', 'HTMLUnknownElement(', 'HTMLVideoElement(', 'HashChangeEvent(', 'History(', 'IDBCursor(', 'IDBCursorWithValue(', 'IDBDatabase(', 'IDBFactory(', 'IDBIndex(', 'IDBKeyRange(', 'IDBObjectStore(', 'IDBOpenDBRequest(', 'IDBRequest(', 'IDBTransaction(', 'IDBVersionChangeEvent(', 'Image(', 'ImageBitmap(', 'ImageData(', 'Infinity', 'InputMethodContext(', 'Int16Array(', 'Int32Array(', 'Int8Array(', 'Intl', 'JSON', 'KeyboardEvent(', 'Location(', 'Map(', 'Math', 'MediaElementAudioSourceNode(', 'MediaError(', 'MediaKeyError(', 'MediaKeyEvent(', 'MediaList(', 'MediaSource(', 'MediaStreamAudioDestinationNode(', 'MediaStreamAudioSourceNode(', 'MediaStreamEvent(', 'MediaStreamTrack(', 'MessageChannel(', 'MessageEvent(', 'MessagePort(', 'MimeType(', 'MimeTypeArray(', 'MouseEvent(', 'MutationEvent(', 'MutationObserver(', 'MutationRecord(', 'NaN', 'NamedNodeMap(', 'Navigator(', 'Node(', 'NodeFilter(', 'NodeIterator(', 'NodeList(', 'Notation(', 'Notification(', 'Number(', 'Object(', 'OfflineAudioCompletionEvent(', 'OfflineAudioContext(', 'Option(', 'OscillatorNode(', 'OverflowEvent(', 'PERSISTENT', 'PageTransitionEvent(', 'Path2D(', 'Performance(', 'PerformanceEntry(', 'PerformanceMark(', 'PerformanceMeasure(', 'PerformanceNavigation(', 'PerformanceResourceTiming(', 'PerformanceTiming(', 'PeriodicWave(', 'Plugin(', 'PluginArray(', 'PopStateEvent(', 'ProcessingInstruction(', 'ProgressEvent(', 'Promise(', 'Proxy', 'RGBColor(', 'RTCIceCandidate(', 'RTCSessionDescription(', 'Range(', 'RangeError(', 'Rect(', 'ReferenceError(', 'RegExp(', 'SVGAElement(', 'SVGAltGlyphDefElement(', 'SVGAltGlyphElement(', 'SVGAltGlyphItemElement(', 'SVGAngle(', 'SVGAnimateElement(', 'SVGAnimateMotionElement(', 'SVGAnimateTransformElement(', 'SVGAnimatedAngle(', 'SVGAnimatedBoolean(', 'SVGAnimatedEnumeration(', 'SVGAnimatedInteger(', 'SVGAnimatedLength(', 'SVGAnimatedLengthList(', 'SVGAnimatedNumber(', 'SVGAnimatedNumberList(', 'SVGAnimatedPreserveAspectRatio(', 'SVGAnimatedRect(', 'SVGAnimatedString(', 'SVGAnimatedTransformList(', 'SVGAnimationElement(', 'SVGCircleElement(', 'SVGClipPathElement(', 'SVGComponentTransferFunctionElement(', 'SVGCursorElement(', 'SVGDefsElement(', 'SVGDescElement(', 'SVGDiscardElement(', 'SVGElement(', 'SVGEllipseElement(', 'SVGFEBlendElement(', 'SVGFEColorMatrixElement(', 'SVGFEComponentTransferElement(', 'SVGFECompositeElement(', 'SVGFEConvolveMatrixElement(', 'SVGFEDiffuseLightingElement(', 'SVGFEDisplacementMapElement(', 'SVGFEDistantLightElement(', 'SVGFEDropShadowElement(', 'SVGFEFloodElement(', 'SVGFEFuncAElement(', 'SVGFEFuncBElement(', 'SVGFEFuncGElement(', 'SVGFEFuncRElement(', 'SVGFEGaussianBlurElement(', 'SVGFEImageElement(', 'SVGFEMergeElement(', 'SVGFEMergeNodeElement(', 'SVGFEMorphologyElement(', 'SVGFEOffsetElement(', 'SVGFEPointLightElement(', 'SVGFESpecularLightingElement(', 'SVGFESpotLightElement(', 'SVGFETileElement(', 'SVGFETurbulenceElement(', 'SVGFilterElement(', 'SVGFontElement(', 'SVGFontFaceElement(', 'SVGFontFaceFormatElement(', 'SVGFontFaceNameElement(', 'SVGFontFaceSrcElement(', 'SVGFontFaceUriElement(', 'SVGForeignObjectElement(', 'SVGGElement(', 'SVGGeometryElement(', 'SVGGlyphElement(', 'SVGGlyphRefElement(', 'SVGGradientElement(', 'SVGGraphicsElement(', 'SVGHKernElement(', 'SVGImageElement(', 'SVGLength(', 'SVGLengthList(', 'SVGLineElement(', 'SVGLinearGradientElement(', 'SVGMPathElement(', 'SVGMarkerElement(', 'SVGMaskElement(', 'SVGMatrix(', 'SVGMetadataElement(', 'SVGMissingGlyphElement(', 'SVGNumber(', 'SVGNumberList(', 'SVGPathElement(', 'SVGPathSeg(', 'SVGPathSegArcAbs(', 'SVGPathSegArcRel(', 'SVGPathSegClosePath(', 'SVGPathSegCurvetoCubicAbs(', 'SVGPathSegCurvetoCubicRel(', 'SVGPathSegCurvetoCubicSmoothAbs(', 'SVGPathSegCurvetoCubicSmoothRel(', 'SVGPathSegCurvetoQuadraticAbs(', 'SVGPathSegCurvetoQuadraticRel(', 'SVGPathSegCurvetoQuadraticSmoothAbs(', 'SVGPathSegCurvetoQuadraticSmoothRel(', 'SVGPathSegLinetoAbs(', 'SVGPathSegLinetoHorizontalAbs(', 'SVGPathSegLinetoHorizontalRel(', 'SVGPathSegLinetoRel(', 'SVGPathSegLinetoVerticalAbs(', 'SVGPathSegLinetoVerticalRel(', 'SVGPathSegList(', 'SVGPathSegMovetoAbs(', 'SVGPathSegMovetoRel(', 'SVGPatternElement(', 'SVGPoint(', 'SVGPointList(', 'SVGPolygonElement(', 'SVGPolylineElement(', 'SVGPreserveAspectRatio(', 'SVGRadialGradientElement(', 'SVGRect(', 'SVGRectElement(', 'SVGRenderingIntent(', 'SVGSVGElement(', 'SVGScriptElement(', 'SVGSetElement(', 'SVGStopElement(', 'SVGStringList(', 'SVGStyleElement(', 'SVGSwitchElement(', 'SVGSymbolElement(', 'SVGTSpanElement(', 'SVGTextContentElement(', 'SVGTextElement(', 'SVGTextPathElement(', 'SVGTextPositioningElement(', 'SVGTitleElement(', 'SVGTransform(', 'SVGTransformList(', 'SVGUnitTypes(', 'SVGUseElement(', 'SVGVKernElement(', 'SVGViewElement(', 'SVGViewSpec(', 'SVGZoomEvent(', 'Screen(', 'ScriptProcessorNode(', 'Selection(', 'Set(', 'ShadowRoot(', 'SharedWorker(', 'SpeechSynthesisEvent(', 'SpeechSynthesisUtterance(', 'Storage(', 'StorageEvent(', 'String(', 'StyleSheet(', 'StyleSheetList(', 'Symbol(', 'SyntaxError(', 'TEMPORARY', 'Text(', 'TextEvent(', 'TextMetrics(', 'TextTrack(', 'TextTrackCue(', 'TextTrackCueList(', 'TextTrackList(', 'TimeRanges(', 'Touch(', 'TouchEvent(', 'TouchList(', 'TrackEvent(', 'TransitionEvent(', 'TreeWalker(', 'TypeError(', 'UIEvent(', 'URIError(', 'URL(', 'Uint16Array(', 'Uint32Array(', 'Uint8Array(', 'Uint8ClampedArray(', 'VTTCue(', 'ValidityState(', 'WaveShaperNode(', 'WeakMap(', 'WeakSet(', 'WebGLActiveInfo(', 'WebGLBuffer(', 'WebGLContextEvent(', 'WebGLFramebuffer(', 'WebGLProgram(', 'WebGLRenderbuffer(', 'WebGLRenderingContext(', 'WebGLShader(', 'WebGLShaderPrecisionFormat(', 'WebGLTexture(', 'WebGLUniformLocation(', 'WebKitAnimationEvent(', 'WebKitCSSFilterRule(', 'WebKitCSSFilterValue(', 'WebKitCSSMatrix(', 'WebKitCSSTransformValue(', 'WebKitGamepad(', 'WebKitMutationObserver(', 'WebKitPoint(', 'WebKitTransitionEvent(', 'WebSocket(', 'WheelEvent(', 'Window(', 'Worker(', 'XMLDocument(', 'XMLHttpRequest(', 'XMLHttpRequestProgressEvent(', 'XMLHttpRequestUpload(', 'XMLSerializer(', 'XPathEvaluator(', 'XPathExpression(', 'XPathResult(', 'XSLTProcessor(', 'addEventListener(', 'alert(', 'applicationCache', 'atob(', 'blur(', 'btoa(', 'cancelAnimationFrame(', 'captureEvents(', 'chrome', 'clearInterval(', 'clearTimeout(', 'clientInformation', 'close(', 'closed', 'confirm(', 'console', 'crypto', 'decodeURI(', 'decodeURIComponent(', 'defaultStatus', 'defaultstatus', 'devicePixelRatio', 'dispatchEvent(', 'document', 'encodeURI(', 'encodeURIComponent(', 'escape(', 'eval(', 'event', 'external', 'find(', 'focus(', 'frameElement', 'frames', 'getComputedStyle(', 'getMatchedCSSRules(', 'getSelection(', 'history', 'indexedDB', 'innerHeight', 'innerWidth', 'isFinite(', 'isNaN(', 'length', 'localStorage', 'location', 'locationbar', 'matchMedia(', 'menubar', 'moveBy(', 'moveTo(', 'name', 'navigator', 'offscreenBuffering', 'onabort', 'onautocomplete', 'onautocompleteerror', 'onbeforeunload', 'onblur', 'oncancel', 'oncanplay', 'oncanplaythrough', 'onchange', 'onclick', 'onclose', 'oncontextmenu', 'oncuechange', 'ondblclick', 'ondevicemotion', 'ondeviceorientation', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'ondurationchange', 'onemptied', 'onended', 'onerror', 'onfocus', 'onhashchange', 'oninput', 'oninvalid', 'onkeydown', 'onkeypress', 'onkeyup', 'onlanguagechange', 'onload', 'onloadeddata', 'onloadedmetadata', 'onloadstart', 'onmessage', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onoffline', 'ononline', 'onpagehide', 'onpageshow', 'onpause', 'onplay', 'onplaying', 'onpopstate', 'onprogress', 'onratechange', 'onreset', 'onresize', 'onscroll', 'onsearch', 'onseeked', 'onseeking', 'onselect', 'onshow', 'onstalled', 'onstorage', 'onsubmit', 'onsuspend', 'ontimeupdate', 'ontoggle', 'ontransitionend', 'onunload', 'onvolumechange', 'onwaiting', 'onwebkitanimationend', 'onwebkitanimationiteration', 'onwebkitanimationstart', 'onwebkittransitionend', 'onwheel', 'open(', 'openDatabase(', 'opener', 'outerHeight', 'outerWidth', 'pageXOffset', 'pageYOffset', 'parent', 'parseFloat(', 'parseInt(', 'performance', 'personalbar', 'postMessage(', 'print(', 'prompt(', 'releaseEvents(', 'removeEventListener(', 'requestAnimationFrame(', 'resizeBy(', 'resizeTo(', 'screen', 'screenLeft', 'screenTop', 'screenX', 'screenY', 'scroll(', 'scrollBy(', 'scrollTo(', 'scrollX', 'scrollY', 'scrollbars', 'self', 'sessionStorage', 'setInterval(', 'setTimeout(', 'showModalDialog(', 'speechSynthesis', 'status', 'statusbar', 'stop(', 'styleMedia', 'toolbar', 'top', 'undefined', 'unescape(', 'webkitAudioContext(', 'webkitCancelAnimationFrame(', 'webkitCancelRequestAnimationFrame(', 'webkitConvertPointFromNodeToPage(', 'webkitConvertPointFromPageToNode(', 'webkitIDBCursor(', 'webkitIDBDatabase(', 'webkitIDBFactory(', 'webkitIDBIndex(', 'webkitIDBKeyRange(', 'webkitIDBObjectStore(', 'webkitIDBRequest(', 'webkitIDBTransaction(', 'webkitIndexedDB', 'webkitMediaStream(', 'webkitOfflineAudioContext(', 'webkitRTCPeerConnection(', 'webkitRequestAnimationFrame(', 'webkitRequestFileSystem(', 'webkitResolveLocalFileSystemURL(', 'webkitSpeechGrammar(', 'webkitSpeechGrammarList(', 'webkitSpeechRecognition(', 'webkitSpeechRecognitionError(', 'webkitSpeechRecognitionEvent(', 'webkitStorageInfo', 'webkitURL(', 'window']$/;"	v
s:xmlhs	home/emanuelx/.vim/bundle/vim-better-javascript/autoload/js.vim	/^let s:xmlhs = ['DONE', 'HEADERS_RECEIVED', 'LOADING', 'OPENED', 'UNSENT', 'abort(', 'addEventListener(', 'arguments', 'caller', 'constructor(', 'dispatchEvent(', 'getAllResponseHeaders(', 'getResponseHeader(', 'length', 'name', 'onabort', 'onerror', 'onload', 'onloadend', 'onloadstart', 'onprogress', 'onreadystatechange', 'ontimeout', 'open(', 'overrideMimeType(', 'prototype', 'readyState', 'removeEventListener(', 'response', 'responseText', 'responseType', 'responseURL', 'responseXML', 'send(', 'setRequestHeader(', 'status', 'statusText', 'timeout', 'toString(', 'upload', 'withCredentials']$/;"	v
saveScreenState	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
setCommonBufOptions	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:setCommonBufOptions()$/;"	f
setupStatusline	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
showMenu	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
snipMate#expandSnip	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	home/emanuelx/.vim/bundle/snipMate/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	home/emanuelx/.vim/bundle/snipMate/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
stripMarkupFromLine	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
tabpagevar	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
toggle	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
treeExistsForBuf	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
unique	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
upDir	home/emanuelx/.vim/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
uploadToGit	update.pl	/^sub uploadToGit(){$/;"	s
warn	home/emanuelx/.vim/autoload/pathogen.vim	/^function! s:warn(msg)$/;"	f
